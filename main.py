import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import ContentType, Message
from aiogram.filters.command import Command
from aiogram.exceptions import TelegramAPIError
from dotenv import load_dotenv
from keyboard import get_start_keyboard
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from callback_handler import callback_router
import pandas as pd
from geopy.distance import geodesic
from aiogram import Router, F


load_dotenv()

BOT_TOKEN = os.getenv('API_KEY')


logging.basicConfig(level=logging.INFO)


bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
dp.include_router(callback_router)
df = pd.read_excel('map.xlsx')
router = Router()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("–û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å...", reply_markup=ReplyKeyboardRemove())
    await message.answer("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø –±–æ—Ç +7–î–æ—Å—Ç–∞–≤–∫–∏. –†–∞—Å—Å–∫–∞–∂—É, –∫–∞–∫ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –ø–æ–ª—É—á–∞—Ç—å —Ç–æ–≤–∞—Ä—ã —Å "
        "<a href='https://www.ozon.ru/'>—Ç–æ–ø–æ–≤–æ–≥–æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ –†–§</a>.", reply_markup= get_start_keyboard(),
        parse_mode="HTML")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–∞
async def delete_webhook():
    try:
        await bot.delete_webhook()
        logging.info("–í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
    except TelegramAPIError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–µ–±—Ö—É–∫–∞: {e}")

def get_nearby_locations(user_location, max_distance_km=2):
    nearby_locations = []

    for index, row in df.iterrows():
        location = (row['—à–∏—Ä–æ—Ç–∞'], row['–¥–æ–ª–≥–æ—Ç–∞'])
        distance = geodesic(user_location, location).kilometers
        if distance <= max_distance_km:
            nearby_locations.append((row['–∞–¥—Ä–µ—Å'], distance, row['—Å—Å—ã–ª–∫–∞'], row['—à–∏—Ä–æ—Ç–∞'], row['–¥–æ–ª–≥–æ—Ç–∞']))
    
    return sorted(nearby_locations, key=lambda x: x[1])


@router.message(F.content_type == ContentType.LOCATION)
async def handle_location(message: Message):
    user_location = (message.location.latitude, message.location.longitude)
    nearby_locations = get_nearby_locations(user_location)

    if nearby_locations:
        response = "<b>–í–æ—Ç –±–ª–∏–∂–∞–π—à–∏–µ –∫ –≤–∞–º –ø—É–Ω–∫—Ç—ã –≤—ã–¥–∞—á–∏:</b>\n\n"
        for address, distance, link, lat, lon in nearby_locations:
            yandex_maps_url = f"https://yandex.ru/maps/?ll={lon},{lat}&z=16&mode=search&text={address}"
            response += f"üìç <b>{address}</b> - {distance:.2f} –∫–º\n"
            response += f"üîó <a href='{link}'>–î–æ–±–∞–≤–∏—Ç—å –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏ –≤ Ozon</a>\n"
            response += f"üó∫Ô∏è <a href='{yandex_maps_url}'>–û—Ç–∫—Ä—ã—Ç—å –≤ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö</a>\n\n"
    else:
        response = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ —Ä–∞–¥–∏—É—Å–µ 2 –∫–º –Ω–µ—Ç —Ç–æ—á–µ–∫."

    await message.reply(response, parse_mode="HTML")

dp.include_router(router)

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞
    await delete_webhook()
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        await dp.start_polling(bot)
    except TelegramAPIError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())